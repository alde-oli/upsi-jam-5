name: "Discord Notifier"
description: "Send notifications to Discord channel"

inputs:
  type:
    description: 'Type of notification (build, test, deploy, pr, release)'
    required: true
  status:
    description: 'Status of the job (success, failure, cancelled)'
    required: true
  branch:
    description: 'Branch name'
    required: false
    default: ''
  commit:
    description: 'Commit SHA'
    required: false
    default: ''
  actor:
    description: 'GitHub actor'
    required: false
    default: ''
  pr_number:
    description: 'Pull request number'
    required: false
    default: ''
  pr_title:
    description: 'Pull request title'
    required: false
    default: ''
  run_id:
    description: 'Workflow run ID'
    required: true
  additional_info:
    description: 'Additional information to include in notification'
    required: false
    default: ''
  discord_webhook:
    description: 'Discord webhook URL'
    required: true
  discord_channel:
    description: 'Target Discord channel (for notification routing)'
    required: false
    default: ''
  test_stats:
    description: 'Test statistics in format "total/passed/failed"'
    required: false
    default: ''
  itch_user:
    description: 'Itch.io username'
    required: false
    default: ''
  itch_game:
    description: 'Itch.io game name'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
      
    - name: Prepare Build Notification
      if: inputs.type == 'build'
      id: build_notification
      shell: bash
      run: |
        if [[ "${{ inputs.status }}" == "success" ]]; then
          echo "title=✅ Build Successful" >> $GITHUB_OUTPUT
          echo "color=0x44FF44" >> $GITHUB_OUTPUT
          echo "description=Build completed successfully on branch ${{ inputs.branch }}.\n\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.status }}" == "cancelled" ]]; then
          echo "title=⚠️ Build Cancelled" >> $GITHUB_OUTPUT
          echo "color=0xFFAA00" >> $GITHUB_OUTPUT
          echo "description=Build was cancelled on branch ${{ inputs.branch }}.\n\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}" >> $GITHUB_OUTPUT
        else
          echo "title=❌ Build Failed" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT
          echo "description=Build failed on branch ${{ inputs.branch }}.\n\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}\n\n[View Build Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.run_id }})" >> $GITHUB_OUTPUT
        fi
    
    - name: Prepare Test Notification
      if: inputs.type == 'test'
      id: test_notification
      shell: bash
      run: |
        TEST_STATS=""
        if [[ "${{ inputs.test_stats }}" != "" ]]; then
          IFS='/' read -r total passed failed <<< "${{ inputs.test_stats }}"
          TEST_STATS="Tests: ${total} total, ${passed} passed, ${failed} failed\n\n"
        fi
        
        if [[ "${{ inputs.status }}" == "success" ]]; then
          echo "title=✅ Tests Passed" >> $GITHUB_OUTPUT
          echo "color=0x44FF44" >> $GITHUB_OUTPUT
          echo "description=${TEST_STATS}All tests passed on branch ${{ inputs.branch }}.\n\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.status }}" == "cancelled" ]]; then
          echo "title=⚠️ Tests Cancelled" >> $GITHUB_OUTPUT
          echo "color=0xFFAA00" >> $GITHUB_OUTPUT
          echo "description=${TEST_STATS}Test run was cancelled on branch ${{ inputs.branch }}.\n\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}" >> $GITHUB_OUTPUT
        else
          echo "title=❌ Tests Failed" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT
          echo "description=${TEST_STATS}Tests failed on branch ${{ inputs.branch }}.\n\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}\n\n[View Test Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.run_id }})" >> $GITHUB_OUTPUT
        fi
    
    - name: Prepare Deploy Notification
      if: inputs.type == 'deploy'
      id: deploy_notification
      shell: bash
      run: |
        if [[ "${{ inputs.status }}" == "success" ]]; then
          echo "title=🚀 Deployment Successful" >> $GITHUB_OUTPUT
          echo "color=0x44FF44" >> $GITHUB_OUTPUT
          echo "description=Successfully deployed to itch.io!\n\nGame: ${{ inputs.itch_game }}\nUser: ${{ inputs.itch_user }}\nCommit: ${{ inputs.commit }}\nBranch: ${{ inputs.branch }}\n\n[Play Online](https://${{ inputs.itch_user }}.itch.io/${{ inputs.itch_game }})" >> $GITHUB_OUTPUT
          echo "url=https://${{ inputs.itch_user }}.itch.io/${{ inputs.itch_game }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.status }}" == "cancelled" ]]; then
          echo "title=⚠️ Deployment Cancelled" >> $GITHUB_OUTPUT
          echo "color=0xFFAA00" >> $GITHUB_OUTPUT
          echo "description=Deployment to itch.io was cancelled.\n\nBranch: ${{ inputs.branch }}\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}" >> $GITHUB_OUTPUT
          echo "url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.run_id }}" >> $GITHUB_OUTPUT
        else
          echo "title=❌ Deployment Failed" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT
          echo "description=Deployment to itch.io failed.\n\nBranch: ${{ inputs.branch }}\nCommit: ${{ inputs.commit }}\nAuthor: ${{ inputs.actor }}\n\n[View Deployment Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.run_id }})" >> $GITHUB_OUTPUT
          echo "url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.run_id }}" >> $GITHUB_OUTPUT
        fi

    - name: Prepare PR Notification
      if: inputs.type == 'pr'
      id: pr_notification
      shell: bash
      run: |
        if [[ "${{ inputs.status }}" == "success" ]]; then
          echo "title=🔍 PR Preview Deployed" >> $GITHUB_OUTPUT
          echo "color=0xFFAA00" >> $GITHUB_OUTPUT
          echo "description=PR #${{ inputs.pr_number }}: \"${{ inputs.pr_title }}\"\n\nCreated by: ${{ inputs.actor }}\nBranch: ${{ inputs.branch }}\n\n[Play Preview](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-preview/${{ inputs.pr_number }}/)" >> $GITHUB_OUTPUT
          echo "url=https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.status }}" == "opened" ]]; then
          echo "title=📝 New Pull Request" >> $GITHUB_OUTPUT
          echo "color=0x0088FF" >> $GITHUB_OUTPUT
          echo "description=PR #${{ inputs.pr_number }}: \"${{ inputs.pr_title }}\"\n\nCreated by: ${{ inputs.actor }}\nBranch: ${{ inputs.branch }}" >> $GITHUB_OUTPUT
          echo "url=https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.status }}" == "merged" ]]; then
          echo "title=🎉 Pull Request Merged" >> $GITHUB_OUTPUT
          echo "color=0x8800FF" >> $GITHUB_OUTPUT
          echo "description=PR #${{ inputs.pr_number }}: \"${{ inputs.pr_title }}\"\n\nMerged by: ${{ inputs.actor }}\nBranch: ${{ inputs.branch }}" >> $GITHUB_OUTPUT
          echo "url=https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.status }}" == "cancelled" ]]; then
          echo "title=⚠️ PR Preview Cancelled" >> $GITHUB_OUTPUT
          echo "color=0xFFAA00" >> $GITHUB_OUTPUT
          echo "description=PR preview deployment was cancelled for PR #${{ inputs.pr_number }}\n\"${{ inputs.pr_title }}\"\n\nCreated by: ${{ inputs.actor }}" >> $GITHUB_OUTPUT
          echo "url=https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        else
          echo "title=❌ PR Preview Failed" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT
          echo "description=PR preview deployment failed for PR #${{ inputs.pr_number }}\n\"${{ inputs.pr_title }}\"\n\nCreated by: ${{ inputs.actor }}\n\n[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.run_id }})" >> $GITHUB_OUTPUT
          echo "url=https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Release Notification
      if: inputs.type == 'release'
      id: release_notification
      shell: bash
      run: |
        RELEASE_TAG="${{ inputs.additional_info }}"
        echo "title=🎮 New Release: ${RELEASE_TAG}" >> $GITHUB_OUTPUT
        echo "color=0x00FFAA" >> $GITHUB_OUTPUT
        echo "description=A new release has been published!\n\nTag: ${RELEASE_TAG}\nCreated by: ${{ inputs.actor }}\n\n[View Release](https://github.com/${{ github.repository }}/releases/tag/${RELEASE_TAG})\n[Play on itch.io](https://${{ inputs.itch_user }}.itch.io/${{ inputs.itch_game }})" >> $GITHUB_OUTPUT
        echo "url=https://github.com/${{ github.repository }}/releases/tag/${RELEASE_TAG}" >> $GITHUB_OUTPUT

    - name: Set Channel Mention
      id: channel_mention
      shell: bash
      run: |
        CHANNEL_MENTION=""
        if [[ "${{ inputs.discord_channel }}" != "" ]]; then
          CHANNEL_MENTION="<#${{ inputs.discord_channel }}> "
        fi
        echo "mention=${CHANNEL_MENTION}" >> $GITHUB_OUTPUT

    - name: Send Discord Notification
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ inputs.discord_webhook }}
        title: ${{ steps.channel_mention.outputs.mention }}${{ steps.build_notification.outputs.title || steps.test_notification.outputs.title || steps.deploy_notification.outputs.title || steps.pr_notification.outputs.title || steps.release_notification.outputs.title }}
        description: ${{ steps.build_notification.outputs.description || steps.test_notification.outputs.description || steps.deploy_notification.outputs.description || steps.pr_notification.outputs.description || steps.release_notification.outputs.description }}${{ inputs.additional_info != '' && format('\n\n{0}', inputs.additional_info) || '' }}
        color: ${{ steps.build_notification.outputs.color || steps.test_notification.outputs.color || steps.deploy_notification.outputs.color || steps.pr_notification.outputs.color || steps.release_notification.outputs.color }}
        url: ${{ steps.deploy_notification.outputs.url || steps.pr_notification.outputs.url || steps.release_notification.outputs.url || format('{0}/{1}/actions/runs/{2}', github.server_url, github.repository, inputs.run_id) }}