name: "Release Pipeline"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (ex: v1.0.0)'
        required: true
        type: string
      deploy_to_itchio:
        description: 'Deploy to itch.io'
        required: false
        default: true
        type: boolean
      release_notes:
        description: 'Release notes'
        required: false
        default: ''
        type: string

jobs:
  check_build_status:
    name: Check Build Status
    runs-on: ubuntu-latest
    outputs:
      last_build_status: ${{ steps.check_build.outputs.build_status }}
    steps:
      - name: Check last build status
        id: check_build
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // D'abord, listons tous les workflows
            const { data: workflowsList } = await github.rest.actions.listWorkflowsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Cherchons l'ID du workflow build.yml
            let buildWorkflowId = null;
            for (const workflow of workflowsList.workflows) {
              if (workflow.name === "Build Game" || workflow.path.includes("build.yml")) {
                buildWorkflowId = workflow.id;
                core.info(`Found build workflow: ${workflow.name}, ID: ${buildWorkflowId}, Path: ${workflow.path}`);
                break;
              }
            }
            
            if (!buildWorkflowId) {
              core.setFailed('Build workflow not found. Please check workflow names.');
              return;
            }
            
            // Maintenant, v√©rifions le dernier run avec l'ID du workflow
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: buildWorkflowId,
              branch: 'main',
              status: 'completed',
              per_page: 1
            });
            
            if (workflowRuns.total_count === 0) {
              core.setFailed('No completed builds found for the main branch');
              return;
            }
            
            const lastRun = workflowRuns.workflow_runs[0];
            core.info(`Last build conclusion: ${lastRun.conclusion}, Run ID: ${lastRun.id}`);
            core.setOutput('build_status', lastRun.conclusion);
            
            if (lastRun.conclusion !== 'success') {
              core.setFailed(`Last build was not successful: ${lastRun.conclusion}`);
            }

  export_for_release:
    name: Export for Release
    needs: check_build_status
    if: needs.check_build_status.outputs.last_build_status == 'success'
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0
          ref: main

      - name: Setup directories
        run: mkdir -p ~/.local/share/godot/export_templates ~/.config/godot/
          
      - name: Install dependencies
        run: apt-get update && apt-get install -y rsync wget unzip

      - name: Cache Godot export templates
        id: cache-templates
        uses: actions/cache@v3
        with:
          path: ~/.local/share/godot/export_templates
          key: ${{ runner.os }}-godot-templates-4.3-stable

      - name: Download and install export templates
        if: steps.cache-templates.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/godotengine/godot/releases/download/4.3-stable/Godot_v4.3-stable_export_templates.tpz -O templates.tpz
          unzip -q templates.tpz
          mkdir -p ~/.local/share/godot/export_templates/4.3.stable
          mv templates/* ~/.local/share/godot/export_templates/4.3.stable/
          rm -rf templates templates.tpz

      - name: Web Build
        run: |
          mkdir -p build/web
          godot --headless --export-release "Web" ./build/web/index.html

      - name: Windows Build
        run: |
          mkdir -p build/windows
          godot --headless --export-release "Windows Desktop" ./build/windows/${GITHUB_REPOSITORY#*/}.exe

      - name: Linux Build
        run: |
          mkdir -p build/linux
          godot --headless --export-release "Linux/X11" ./build/linux/${GITHUB_REPOSITORY#*/}.x86_64
          chmod +x ./build/linux/${GITHUB_REPOSITORY#*/}.x86_64

      - name: Create release ZIP files
        run: |
          cd build/web && zip -r ../../web-build.zip .
          cd ../../build/windows && zip -r ../../windows-build.zip .
          cd ../../build/linux && zip -r ../../linux-build.zip .

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body: |
            ${{ github.event.inputs.release_notes }}
            
            This release was created automatically by GitHub Actions.
          files: |
            web-build.zip
            windows-build.zip
            linux-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Call Discord Notifier
        uses: ./.github/actions/discord-notifier
        with:
          type: 'release'
          status: ${{ job.status }}
          branch: 'main'
          commit: ${{ github.sha }}
          actor: ${{ github.actor }}
          run_id: ${{ github.run_id }}
          additional_info: ${{ github.event.inputs.version }}
          DISCORD_DEPLOY: ${{ secrets.DISCORD_DEPLOY }}

  deploy_to_itchio:
    name: Deploy to itch.io
    needs: export_for_release
    if: github.event.inputs.deploy_to_itchio == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build

      - name: Extract builds
        run: |
          mkdir -p build/web build/windows build/linux
          unzip -o web-build.zip -d build/web/
          unzip -o windows-build.zip -d build/windows/
          unzip -o linux-build.zip -d build/linux/

      - name: Deploy Web to itch.io
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: web
          ITCH_GAME: ${{ secrets.ITCH_GAME }}
          ITCH_USER: ${{ secrets.ITCH_USER }}
          PACKAGE: build/web
          VERSION: ${{ github.event.inputs.version }}
          BUILD_METADATA: github-${{ github.run_id }}

      - name: Deploy Windows to itch.io
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: windows
          ITCH_GAME: ${{ secrets.ITCH_GAME }}
          ITCH_USER: ${{ secrets.ITCH_USER }}
          PACKAGE: build/windows
          VERSION: ${{ github.event.inputs.version }}
          BUILD_METADATA: github-${{ github.run_id }}

      - name: Deploy Linux to itch.io
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: linux
          ITCH_GAME: ${{ secrets.ITCH_GAME }}
          ITCH_USER: ${{ secrets.ITCH_USER }}
          PACKAGE: build/linux
          VERSION: ${{ github.event.inputs.version }}
          BUILD_METADATA: github-${{ github.run_id }}

      - name: Call Discord Notifier
        uses: ./.github/actions/discord-notifier
        with:
          type: 'deploy'
          status: ${{ job.status }}
          branch: 'main'
          commit: ${{ github.sha }}
          actor: ${{ github.actor }}
          run_id: ${{ github.run_id }}
          DISCORD_DEPLOY: ${{ secrets.DISCORD_DEPLOY }}
          itch_user: ${{ secrets.ITCH_USER }}
          itch_game: ${{ secrets.ITCH_GAME }}