name: "Build and Deploy Game"

on:
  # Auto-déclenchement à chaque push sur main
  push:
    branches: [main]
  # Déclenchement manuel pour les releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (ex: v1.0.0)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Release notes'
        required: false
        default: ''
        type: string

# Permissions nécessaires
permissions:
  contents: write  # Pour créer des tags et des releases

jobs:
  export_game:
    name: Export Game
    # S'exécute pour tous les déclencheurs (push et manuel)
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global --add safe.directory "$(pwd)"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Setup directories
        run: mkdir -p ~/.local/share/godot/export_templates ~/.config/godot/
          
      - name: Install dependencies
        run: apt-get update && apt-get install -y rsync wget unzip

      - name: Cache Godot export templates
        id: cache-templates
        uses: actions/cache@v3
        with:
          path: ~/.local/share/godot/export_templates
          key: ${{ runner.os }}-godot-templates-4.3-stable

      - name: Download and install export templates
        if: steps.cache-templates.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/godotengine/godot/releases/download/4.3-stable/Godot_v4.3-stable_export_templates.tpz -O templates.tpz
          unzip -q templates.tpz
          mkdir -p ~/.local/share/godot/export_templates/4.3.stable
          mv templates/* ~/.local/share/godot/export_templates/4.3.stable/
          rm -rf templates templates.tpz
      
      # New step: Reset UIDs and force reimport
      - name: Reset UIDs and Reimport Assets
        run: |
          # Remove the UID cache to force regeneration
          rm -rf .godot/uid_cache.bin .godot/imported/
          # Create empty cache structure to ensure proper initialization
          mkdir -p .godot
          echo '{"version": 2, "uid_cache": {}}' > .godot/uid_cache.bin
          # Force resource reimport
          godot --headless --editor --quit
          # Ensure the editor has time to complete the reimport
          sleep 10

      - name: Web Build
        id: web_build
        run: |
          mkdir -p build/web
          # Make sure the export preset uses paths instead of UIDs
          godot --headless --export-release "Web" ./build/web/index.html || {
            echo "::set-output name=build_failed::true"
            exit 1
          }

      - name: Create release ZIP file
        run: |
          cd build/web && zip -r ../../web-build.zip .

      - name: Upload Web build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web
          retention-days: 7

      # Étapes pour créer une release (seulement si lancé manuellement avec create_release=true)
      - name: Create Git Tag
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' && github.event.inputs.version != '' }}
        run: |
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push https://${{ github.token }}@github.com/${{ github.repository }}.git ${{ github.event.inputs.version }}

      - name: Create GitHub Release
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' && github.event.inputs.version != '' }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body: |
            ${{ github.event.inputs.release_notes }}
            
            This release was created automatically by GitHub Actions.
          files: |
            web-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Notification Discord pour build réussi ou release
      - name: Call Discord Notifier for Build/Release
        uses: ./.github/actions/discord-notifier
        with:
          type: ${{ github.event.inputs.create_release == 'true' && 'release' || 'build' }}
          status: ${{ job.status }}
          branch: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          actor: ${{ github.actor }}
          run_id: ${{ github.run_id }}
          discord_webhook: ${{ secrets.DISCORD_BUILD_TEST }}
          additional_info: ${{ github.event.inputs.version || 'Auto-build completed' }}

  # Job de déploiement sur itch.io (toujours exécuté après un build réussi)
  deploy_to_itchio:
    name: Deploy to itch.io
    needs: export_game
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Download web-build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ./build/web

      - name: Deploy Web to itch.io
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: web
          ITCH_GAME: ${{ secrets.ITCH_GAME }}
          ITCH_USER: ${{ secrets.ITCH_USER }}
          PACKAGE: build/web
          VERSION: ${{ github.event.inputs.version || github.sha }}
          BUILD_METADATA: github-${{ github.run_id }}

      - name: Call Discord Notifier for Deploy
        uses: ./.github/actions/discord-notifier
        with:
          type: 'deploy'
          status: ${{ job.status }}
          branch: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          actor: ${{ github.actor }}
          run_id: ${{ github.run_id }}
          discord_webhook: ${{ secrets.DISCORD_DEPLOY }}
          itch_user: ${{ secrets.ITCH_USER }}
          itch_game: ${{ secrets.ITCH_GAME }}
